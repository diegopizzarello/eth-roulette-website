/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { WaveRoulette, WaveRouletteInterface } from "../WaveRoulette";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NewWave",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct WaveRoulette.Wave[]",
        name: "players",
        type: "tuple[]",
      },
    ],
    name: "NewWinner",
    type: "event",
  },
  {
    inputs: [],
    name: "getAllWaves",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct WaveRoulette.Wave[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRafflePlayers",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct WaveRoulette.Wave[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalWaves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWinners",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct WaveRoulette.Wave[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastWavedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "wave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805560036001556116bd8061001c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063449d46c0146100675780639a2cdc0814610083578063a42a4663146100a1578063bd43a908146100d1578063df15c37e146100ef578063fda4021c1461010d575b600080fd5b610081600480360381019061007c9190610d8b565b61012b565b005b61008b61038b565b6040516100989190611253565b60405180910390f35b6100bb60048036038101906100b69190610d62565b610394565b6040516100c89190611253565b60405180910390f35b6100d96103ac565b6040516100e691906111f1565b60405180910390f35b6100f76104fd565b60405161010491906111f1565b60405180910390f35b61011561064e565b60405161012291906111f1565b60405180910390f35b42600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160008082825461018191906113f7565b92505081905550600260405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610247929190610b88565b50604082015181600201555050600360405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610313929190610b88565b506040820151816002015550503373ffffffffffffffffffffffffffffffffffffffff167f5f7e16dc676677766a70e9c5628aa6c54ddb8b6e5188e2ae1e1f17f1ffbea716428360405161036892919061126e565b60405180910390a260015460038054905014156103885761038761079f565b5b50565b60008054905090565b60056020528060005260406000206000915090505481565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156104f457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610459906114f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610485906114f5565b80156104d25780601f106104a7576101008083540402835291602001916104d2565b820191906000526020600020905b8154815290600101906020018083116104b557829003601f168201915b50505050508152602001600282015481525050815260200190600101906103d0565b50505050905090565b60606004805480602002602001604051908101604052809291908181526020016000905b8282101561064557838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546105aa906114f5565b80601f01602080910402602001604051908101604052809291908181526020018280546105d6906114f5565b80156106235780601f106105f857610100808354040283529160200191610623565b820191906000526020600020905b81548152906001019060200180831161060657829003601f168201915b5050505050815260200160028201548152505081526020019060010190610521565b50505050905090565b60606003805480602002602001604051908101604052809291908181526020016000905b8282101561079657838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546106fb906114f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610727906114f5565b80156107745780601f1061074957610100808354040283529160200191610774565b820191906000526020600020905b81548152906001019060200180831161075757829003601f168201915b5050505050815260200160028201548152505081526020019060010190610672565b50505050905090565b60006107a9610a46565b90506000600382815481106107e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610866906114f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610892906114f5565b80156108df5780601f106108b4576101008083540402835291602001916108df565b820191906000526020600020905b8154815290600101906020018083116108c257829003601f168201915b5050505050815260200160028201548152505090506109018160000151610a89565b60046040518060600160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015181526020018360400151815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906109cc929190610b88565b50604082015181600201555050806000015173ffffffffffffffffffffffffffffffffffffffff167f627c6bc4ebc42ccf57a74801e8eeac9a21075074b22e68566ea76c68a67176124283602001516003604051610a2c9392919061129e565b60405180910390a260036000610a429190610c0e565b5050565b60006001544244604051602001610a5e9291906111c5565b6040516020818303038152906040528051906020012060001c610a819190611565565b60ff16905090565b6000655af3107a4000905047811115610ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ace90611213565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610afd906111b0565b60006040518083038185875af1925050503d8060008114610b3a576040519150601f19603f3d011682016040523d82523d6000602084013e610b3f565b606091505b5050905080610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a90611233565b60405180910390fd5b505050565b828054610b94906114f5565b90600052602060002090601f016020900481019282610bb65760008555610bfd565b82601f10610bcf57805160ff1916838001178555610bfd565b82800160010185558215610bfd579182015b82811115610bfc578251825591602001919060010190610be1565b5b509050610c0a9190610c32565b5090565b5080546000825560030290600052602060002090810190610c2f9190610c4f565b50565b5b80821115610c4b576000816000905550600101610c33565b5090565b5b80821115610ca157600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000610c909190610ca5565b600282016000905550600301610c50565b5090565b508054610cb1906114f5565b6000825580601f10610cc35750610ce2565b601f016020900490600052602060002090810190610ce19190610c32565b5b50565b6000610cf8610cf384611314565b6112e3565b905082815260208101848484011115610d1057600080fd5b610d1b8482856114b3565b509392505050565b600081359050610d3281611670565b92915050565b600082601f830112610d4957600080fd5b8135610d59848260208601610ce5565b91505092915050565b600060208284031215610d7457600080fd5b6000610d8284828501610d23565b91505092915050565b600060208284031215610d9d57600080fd5b600082013567ffffffffffffffff811115610db757600080fd5b610dc384828501610d38565b91505092915050565b6000610dd883836110c4565b905092915050565b6000610dec8383611114565b905092915050565b610dfd81611477565b82525050565b6000610e0e8261137e565b610e1881856113b9565b935083602082028501610e2a85611344565b8060005b85811015610e665784840389528151610e478582610dcc565b9450610e528361139f565b925060208a01995050600181019050610e2e565b50829750879550505050505092915050565b6000610e8382611389565b610e8d81856113b9565b935083602082028501610e9f85611354565b8060005b85811015610eda57848403895281610ebb8582610de0565b9450610ec6836113ac565b925060208a01995050600181019050610ea3565b50829750879550505050505092915050565b6000610ef782611394565b610f0181856113d5565b9350610f118185602086016114c2565b610f1a81611652565b840191505092915050565b6000610f3082611394565b610f3a81856113e6565b9350610f4a8185602086016114c2565b610f5381611652565b840191505092915050565b60008154610f6b816114f5565b610f7581866113d5565b94506001821660008114610f905760018114610fa257610fd5565b60ff1983168652602086019350610fd5565b610fab85611369565b60005b83811015610fcd57815481890152600182019150602081019050610fae565b808801955050505b50505092915050565b6000610feb6034836113e6565b91507f547279696e6720746f207769746864726177206d6f7265206d6f6e657920746860008301527f616e2074686520636f6e7472616374206861732e0000000000000000000000006020830152604082019050919050565b60006110516027836113e6565b91507f4661696c656420746f207769746864726177206d6f6e65792066726f6d20636f60008301527f6e74726163742e000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006110b76000836113ca565b9150600082019050919050565b60006060830160008301516110dc6000860182610df4565b50602083015184820360208601526110f48282610eec565b9150506040830151611109604086018261117b565b508091505092915050565b600060608301600080840154905061112b81611527565b6111386000870182610df4565b5060018401858303602087015261114f8382610f5e565b9250506002840154905061116281611541565b61116f604087018261117b565b50819250505092915050565b611184816114a9565b82525050565b611193816114a9565b82525050565b6111aa6111a5826114a9565b61155b565b82525050565b60006111bb826110aa565b9150819050919050565b60006111d18285611199565b6020820191506111e18284611199565b6020820191508190509392505050565b6000602082019050818103600083015261120b8184610e03565b905092915050565b6000602082019050818103600083015261122c81610fde565b9050919050565b6000602082019050818103600083015261124c81611044565b9050919050565b6000602082019050611268600083018461118a565b92915050565b6000604082019050611283600083018561118a565b81810360208301526112958184610f25565b90509392505050565b60006060820190506112b3600083018661118a565b81810360208301526112c58185610f25565b905081810360408301526112d98184610e78565b9050949350505050565b6000604051905081810181811067ffffffffffffffff8211171561130a57611309611623565b5b8060405250919050565b600067ffffffffffffffff82111561132f5761132e611623565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b6000602082019050919050565b6000600382019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611402826114a9565b915061140d836114a9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561144257611441611596565b5b828201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061148282611489565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156114e05780820151818401526020810190506114c5565b838111156114ef576000848401525b50505050565b6000600282049050600182168061150d57607f821691505b60208210811415611521576115206115f4565b5b50919050565b600061153a61153583611663565b61144d565b9050919050565b600061155461154f83611663565b61146d565b9050919050565b6000819050919050565b6000611570826114a9565b915061157b836114a9565b92508261158b5761158a6115c5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b61167981611477565b811461168457600080fd5b5056fea2646970667358221220cac6aab5514e52119e00c5be3c27156630c67bddc56ca473b59105b2add40bcd64736f6c63430008000033";

type WaveRouletteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WaveRouletteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WaveRoulette__factory extends ContractFactory {
  constructor(...args: WaveRouletteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<WaveRoulette> {
    return super.deploy(overrides || {}) as Promise<WaveRoulette>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): WaveRoulette {
    return super.attach(address) as WaveRoulette;
  }
  connect(signer: Signer): WaveRoulette__factory {
    return super.connect(signer) as WaveRoulette__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WaveRouletteInterface {
    return new utils.Interface(_abi) as WaveRouletteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WaveRoulette {
    return new Contract(address, _abi, signerOrProvider) as WaveRoulette;
  }
}
