/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { WaveRoulette, WaveRouletteInterface } from "../WaveRoulette";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NewWave",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct WaveRoulette.Wave[]",
        name: "players",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct WaveRoulette.Wave",
        name: "lastWave",
        type: "tuple",
      },
    ],
    name: "NewWinner",
    type: "event",
  },
  {
    inputs: [],
    name: "getAllWaves",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct WaveRoulette.Wave[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRafflePlayers",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct WaveRoulette.Wave[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalWaves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWinners",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct WaveRoulette.Wave[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastWavedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "wave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805560036001556117018061001c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063449d46c0146100675780639a2cdc0814610083578063a42a4663146100a1578063bd43a908146100d1578063df15c37e146100ef578063fda4021c1461010d575b600080fd5b610081600480360381019061007c9190610d6a565b61012b565b005b61008b610367565b6040516100989190611282565b60405180910390f35b6100bb60048036038101906100b69190610d41565b610370565b6040516100c89190611282565b60405180910390f35b6100d9610388565b6040516100e69190611220565b60405180910390f35b6100f76104d9565b6040516101049190611220565b60405180910390f35b61011561062a565b6040516101229190611220565b60405180910390f35b42600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600080828254610181919061143b565b92505081905550600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001428152509050600281908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061024c929190610b67565b50604082015181600201555050600381908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906102e8929190610b67565b5060408201518160020155505060015460038054905014156103125761030d8161077b565b610363565b3373ffffffffffffffffffffffffffffffffffffffff167f5f7e16dc676677766a70e9c5628aa6c54ddb8b6e5188e2ae1e1f17f1ffbea716428460405161035a92919061129d565b60405180910390a25b5050565b60008054905090565b60056020528060005260406000206000915090505481565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156104d057838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461043590611539565b80601f016020809104026020016040519081016040528092919081815260200182805461046190611539565b80156104ae5780601f10610483576101008083540402835291602001916104ae565b820191906000526020600020905b81548152906001019060200180831161049157829003601f168201915b50505050508152602001600282015481525050815260200190600101906103ac565b50505050905090565b60606004805480602002602001604051908101604052809291908181526020016000905b8282101561062157838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461058690611539565b80601f01602080910402602001604051908101604052809291908181526020018280546105b290611539565b80156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b50505050508152602001600282015481525050815260200190600101906104fd565b50505050905090565b60606003805480602002602001604051908101604052809291908181526020016000905b8282101561077257838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546106d790611539565b80601f016020809104026020016040519081016040528092919081815260200182805461070390611539565b80156107505780601f1061072557610100808354040283529160200191610750565b820191906000526020600020905b81548152906001019060200180831161073357829003601f168201915b505050505081526020016002820154815250508152602001906001019061064e565b50505050905090565b6000610785610a25565b90506000600382815481106107c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461084290611539565b80601f016020809104026020016040519081016040528092919081815260200182805461086e90611539565b80156108bb5780601f10610890576101008083540402835291602001916108bb565b820191906000526020600020905b81548152906001019060200180831161089e57829003601f168201915b5050505050815260200160028201548152505090506108dd8160000151610a68565b60046040518060600160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015181526020018360400151815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906109a8929190610b67565b50604082015181600201555050806000015173ffffffffffffffffffffffffffffffffffffffff167feeada6701a3fb5fa91304d0f5eb1fe8dcf6b232395728f0859772939bea04fd8428360200151600387604051610a0a94939291906112cd565b60405180910390a260036000610a209190610bed565b505050565b60006001544244604051602001610a3d9291906111f4565b6040516020818303038152906040528051906020012060001c610a6091906115a9565b60ff16905090565b6000655af3107a4000905047811115610ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aad90611242565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610adc906111df565b60006040518083038185875af1925050503d8060008114610b19576040519150601f19603f3d011682016040523d82523d6000602084013e610b1e565b606091505b5050905080610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5990611262565b60405180910390fd5b505050565b828054610b7390611539565b90600052602060002090601f016020900481019282610b955760008555610bdc565b82601f10610bae57805160ff1916838001178555610bdc565b82800160010185558215610bdc579182015b82811115610bdb578251825591602001919060010190610bc0565b5b509050610be99190610c11565b5090565b5080546000825560030290600052602060002090810190610c0e9190610c2e565b50565b5b80821115610c2a576000816000905550600101610c12565b5090565b5b80821115610c8057600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000610c6f9190610c84565b600282016000905550600301610c2f565b5090565b508054610c9090611539565b6000825580601f10610ca25750610cc1565b601f016020900490600052602060002090810190610cc09190610c11565b5b50565b6000610cd7610cd284611358565b611327565b905082815260208101848484011115610cef57600080fd5b610cfa8482856114f7565b509392505050565b600081359050610d11816116b4565b92915050565b600082601f830112610d2857600080fd5b8135610d38848260208601610cc4565b91505092915050565b600060208284031215610d5357600080fd5b6000610d6184828501610d02565b91505092915050565b600060208284031215610d7c57600080fd5b600082013567ffffffffffffffff811115610d9657600080fd5b610da284828501610d17565b91505092915050565b6000610db783836110a3565b905092915050565b6000610dcb8383611143565b905092915050565b610ddc816114bb565b82525050565b6000610ded826113c2565b610df781856113fd565b935083602082028501610e0985611388565b8060005b85811015610e455784840389528151610e268582610dab565b9450610e31836113e3565b925060208a01995050600181019050610e0d565b50829750879550505050505092915050565b6000610e62826113cd565b610e6c81856113fd565b935083602082028501610e7e85611398565b8060005b85811015610eb957848403895281610e9a8582610dbf565b9450610ea5836113f0565b925060208a01995050600181019050610e82565b50829750879550505050505092915050565b6000610ed6826113d8565b610ee08185611419565b9350610ef0818560208601611506565b610ef981611696565b840191505092915050565b6000610f0f826113d8565b610f19818561142a565b9350610f29818560208601611506565b610f3281611696565b840191505092915050565b60008154610f4a81611539565b610f548186611419565b94506001821660008114610f6f5760018114610f8157610fb4565b60ff1983168652602086019350610fb4565b610f8a856113ad565b60005b83811015610fac57815481890152600182019150602081019050610f8d565b808801955050505b50505092915050565b6000610fca60348361142a565b91507f547279696e6720746f207769746864726177206d6f7265206d6f6e657920746860008301527f616e2074686520636f6e7472616374206861732e0000000000000000000000006020830152604082019050919050565b600061103060278361142a565b91507f4661696c656420746f207769746864726177206d6f6e65792066726f6d20636f60008301527f6e74726163742e000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061109660008361140e565b9150600082019050919050565b60006060830160008301516110bb6000860182610dd3565b50602083015184820360208601526110d38282610ecb565b91505060408301516110e860408601826111aa565b508091505092915050565b600060608301600083015161110b6000860182610dd3565b50602083015184820360208601526111238282610ecb565b915050604083015161113860408601826111aa565b508091505092915050565b600060608301600080840154905061115a8161156b565b6111676000870182610dd3565b5060018401858303602087015261117e8382610f3d565b9250506002840154905061119181611585565b61119e60408701826111aa565b50819250505092915050565b6111b3816114ed565b82525050565b6111c2816114ed565b82525050565b6111d96111d4826114ed565b61159f565b82525050565b60006111ea82611089565b9150819050919050565b600061120082856111c8565b60208201915061121082846111c8565b6020820191508190509392505050565b6000602082019050818103600083015261123a8184610de2565b905092915050565b6000602082019050818103600083015261125b81610fbd565b9050919050565b6000602082019050818103600083015261127b81611023565b9050919050565b600060208201905061129760008301846111b9565b92915050565b60006040820190506112b260008301856111b9565b81810360208301526112c48184610f04565b90509392505050565b60006080820190506112e260008301876111b9565b81810360208301526112f48186610f04565b905081810360408301526113088185610e57565b9050818103606083015261131c81846110f3565b905095945050505050565b6000604051905081810181811067ffffffffffffffff8211171561134e5761134d611667565b5b8060405250919050565b600067ffffffffffffffff82111561137357611372611667565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b6000602082019050919050565b6000600382019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611446826114ed565b9150611451836114ed565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611486576114856115da565b5b828201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006114c6826114cd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611524578082015181840152602081019050611509565b83811115611533576000848401525b50505050565b6000600282049050600182168061155157607f821691505b6020821081141561156557611564611638565b5b50919050565b600061157e611579836116a7565b611491565b9050919050565b6000611598611593836116a7565b6114b1565b9050919050565b6000819050919050565b60006115b4826114ed565b91506115bf836114ed565b9250826115cf576115ce611609565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b6116bd816114bb565b81146116c857600080fd5b5056fea2646970667358221220d01dec42fcdde7cd4f473241a0dd5eaf1cbfa8f9748c24ce5865eaa6e8f5c53c64736f6c63430008000033";

type WaveRouletteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WaveRouletteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WaveRoulette__factory extends ContractFactory {
  constructor(...args: WaveRouletteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<WaveRoulette> {
    return super.deploy(overrides || {}) as Promise<WaveRoulette>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): WaveRoulette {
    return super.attach(address) as WaveRoulette;
  }
  connect(signer: Signer): WaveRoulette__factory {
    return super.connect(signer) as WaveRoulette__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WaveRouletteInterface {
    return new utils.Interface(_abi) as WaveRouletteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WaveRoulette {
    return new Contract(address, _abi, signerOrProvider) as WaveRoulette;
  }
}
